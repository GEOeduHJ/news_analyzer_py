# -*- coding: utf-8 -*-
"""news_bigkinds_analysis.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bO6JXhRmehlsWXMbnNzKjUnfMT9F-NlK
"""

!pip install konlpy wordcloud plotly networkx openpyxl -q
!apt-get -y install fonts-nanum > /dev/null
!fc-cache -fv > /dev/null

import matplotlib.pyplot as plt
from wordcloud import WordCloud
from collections import Counter
from konlpy.tag import Okt
import plotly.express as px
import plotly.graph_objects as go
import networkx as nx
import pandas as pd
import os

plt.rc('font', family='NanumGothic')  # 한글 폰트 설정

"""# 뉴스기사 데이터 둘러보기 :
1) 빅카인즈에서 수집한 총 778개의 기사(2020~2025년)별 메타데이터가 정리된 엑셀 파일을 업로드함.

2) 업로드한 데이터가 정리된 인터랙티브 표를 통해 기사를 1차적으로 탐색한다.
* 표 내에서 검색, 정렬 등의 기능을 활용할 수 있음.
"""

# 빅카인즈로 다운받은 뉴스기사 목록파일을 직접 업로드하기(xlsx 파일)

from google.colab import files
uploaded = files.upload()  # "Bigkinds_news_result.xlsx" 파일 업로드
df = pd.read_excel(next(iter(uploaded)))

from IPython.display import HTML
import pandas as pd

def render_mini_datatable(df, max_rows=100):
    # ✅ 열 선택 및 한글 열 이름으로 매핑
    selected_columns = ["일자", "제목", "기관", "특성추출(가중치순 상위 50개)", "URL"]
    rename_map = {
        "일자": "작성/게시일자",
        "제목": "기사제목",
        "기관": "관련기관",
        "특성추출(가중치순 상위 50개)": "키워드(가중치순 상위 50개)",
        "URL": "기사링크"
    }

    df_display = df[selected_columns].rename(columns=rename_map)

    html = df_display.to_html(classes='table table-striped table-bordered', escape=False)

    return HTML(f'''
    <style>
        table.dataTable {{
            table-layout: auto !important;
            width: auto !important;
            word-break: break-word;
            white-space: normal;
        }}
        th, td {{
            padding: 8px !important;
            text-align: left !important;
            vertical-align: top;
            max-width: 400px;
            white-space: normal !important;
        }}
    </style>
    <link rel="stylesheet"
          href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css"/>
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script>
    $(document).ready(function() {{
        $('table').DataTable({{
            "pageLength": 50,
            "autoWidth": false
        }});
    }});
    </script>
    {html}
    ''')

# ✅ 실행
render_mini_datatable(df)

"""# 분석 1. 연도별 기사량 트렌드 분석
기사별 작성일 또는 게시일을 기준으로, 연도별 기사량을 인터랙티브 막대그래프로 시각화하여 분석함.
"""

# 분석 1. 연도별 기사량 분석

df["연도"] = df["일자"].astype(str).str[:4]
year_counts = df["연도"].value_counts().sort_index()

fig1 = px.bar(
    x=year_counts.index,
    y=year_counts.values,
    labels={"x": "연도", "y": "기사 수"},
    title="연도별 기사 수 분석"
)
fig1.show()

"""# 분석 2. 연관키워드 워드클라우드 분석
뉴스 기사에서 "키워드"로 분류된 단어들을 워드클라우드로 나타내어 분석함.
* 키워드는 본문 내에서 추출된 키워드 중 단순 숫자(1, 2, 2018, 2019 등), 이메일 주소, 시간을 뜻하는 단어(밤, 낮, 새벽 등)를 제외한 결과가 표시됨.
"""

# 분석 2. 연관키워드 워드클라우드 분석

import warnings
warnings.filterwarnings("ignore")  # ⚠️ 모든 경고 메시지 숨기기

from wordcloud import WordCloud
import matplotlib.pyplot as plt
from collections import Counter

# 키워드 처리
all_keywords = ",".join(df["키워드"].dropna().astype(str)).split(",")
filtered_keywords = [kw.strip() for kw in all_keywords if len(kw.strip()) > 1]
keyword_freq = Counter(filtered_keywords)
top_keywords = dict(keyword_freq.most_common(100))

# 워드클라우드 생성
wc = WordCloud(
    font_path="/usr/share/fonts/truetype/nanum/NanumGothic.ttf",  # 설치된 나눔고딕 경로
    background_color="white",
    width=800,
    height=400
).generate_from_frequencies(top_keywords)

# PNG 파일로 저장
wc.to_file("wordcloud_output.png")

# 이미지 출력
plt.figure(figsize=(12, 6))
plt.imshow(wc, interpolation="bilinear")
plt.axis("off")
plt.title("")
plt.show()

"""# 분석 3. 이해관계도 네트워크 분석
뉴스 기사에 등장한 여러 기관 간의 네트워크를 인터랙티브 이해관계도로 시각화하여 분석함.
* 모든 기관이 아닌, 상위 20개의 기관만을 나타냄.
"""

from collections import Counter
import networkx as nx
import plotly.graph_objects as go

# 1. 기관 간 동시출현 관계 추출
co_occurrence = Counter()
for row in df["기관"].dropna():
    orgs = list(set([o.strip() for o in str(row).split(",") if len(o.strip()) > 1]))
    for i in range(len(orgs)):
        for j in range(i+1, len(orgs)):
            edge = tuple(sorted([orgs[i], orgs[j]]))
            co_occurrence[edge] += 1

# 2. 동시출현 5회 이상만 필터링
filtered_edges = {pair: w for pair, w in co_occurrence.items() if w >= 5}

G = nx.Graph()
for (a, b), weight in filtered_edges.items():
    G.add_edge(a, b, weight=weight)

# 3. 연결 수 기준 상위 20개 노드만 사용
# 상위 키워드 수 직접 조절할 수 있도록 하면 더 좋을 텐데...
top_nodes = sorted(G.degree, key=lambda x: x[1], reverse=True)[:20]
G_filtered = G.subgraph([n for n, _ in top_nodes])

# 4. 노드 위치 계산
pos = nx.spring_layout(G_filtered, seed=42)

# 5. 엣지 좌표 추출
edge_x, edge_y = [], []
for edge in G_filtered.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_x += [x0, x1, None]
    edge_y += [y0, y1, None]

edge_trace = go.Scatter(
    x=edge_x, y=edge_y,
    line=dict(width=0.5, color="#aaa"),
    hoverinfo='none',
    mode='lines'
)
# 6. 노드 좌표 및 정보
node_x, node_y, node_text = [], [], []
node_sizes = []
node_colors = []

for node in G_filtered.nodes():
    x, y = pos[node]
    degree = G_filtered.degree[node]
    node_x.append(x)
    node_y.append(y)
    node_text.append(f"{node} (연결 수: {degree})")

    # 🔥 연결 수에 따라 민감하게 반응하도록 크기 조정
    size = 3 + (degree ** 1.6)  # 또는 np.log(degree + 1) * 15 도 가능
    node_sizes.append(size)
    node_colors.append(degree)

node_trace = go.Scatter(
    x=node_x, y=node_y,
    mode='markers+text',
    text=[n for n in G_filtered.nodes()],
    textposition='top center',
    marker=dict(
        size=node_sizes,
        color=node_colors,
        colorscale='YlGnBu',
        showscale=True,
        colorbar=dict(title='연결 수')
    ),
    hovertext=node_text,
    hoverinfo='text'
)

# 7. 최종 그래프 시각화
fig2 = go.Figure(data=[edge_trace, node_trace],
    layout=go.Layout(
        title="기관 간 핵심 네트워크 관계도 (Top 20)",
        showlegend=False,
        hovermode='closest',
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)
    )
)
fig2.show()